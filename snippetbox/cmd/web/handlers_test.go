package main

import (
	"io/ioutil"
	"log"
	"net/http"
	"net/http/httptest"
	"testing"
)

func TestPing(t *testing.T) {
	// t.Parallel()
	/* unit testing of handlers
	//initialize a new httptest.NewRecorder
	rr := httptest.NewRecorder()

	// Initialize a new dummy http.Request.
	r, err := http.NewRequest(http.MethodGet, "/", nil)
	if err != nil {
		t.Fatal(err)
	}

	// Call the ping handler function, passing in the
	// httptest.ResponseRecorder and http.Request.
	ping(rr, r)

	// Call the Result() method on the http.ResponseRecorder to get the
	// http.Response generated by the ping handler.
	rs := rr.Result()

	// We can then examine the http.Response to check that the status code
	// written by the ping handler was 200.
	if rs.StatusCode != http.StatusOK {
		t.Errorf("want %d; got %d", http.StatusOK, rs.StatusCode)
	}

	// And we can check that the response body written by the ping handler
	// equals "OK".
	defer rs.Body.Close()
	body, err := ioutil.ReadAll(rs.Body)
	if err != nil {
		t.Fatal(err)
	}

	if string(body) != "OK" {
		t.Errorf("want %q; got %q", "OK", string(body))
	} */

	// Create a new instance of our application struct. For now, this just 
	// contains a couple of mock loggers (which discard anything written to them).
	app := &application{
		errorLog: log.New(ioutil.Discard, "", 0),
		infoLog: log.New(ioutil.Discard, "", 0),
	}

	// We then use the httptest.NewTLSServer() function to create a new test 
	// server, passing in the value returned by our app.routes() method as the 
	// handler for the server. This starts up a HTTPS server which listens on a 
	// randomly-chosen port of your local machine for the duration of the test. 
	// Notice that we defer a call to ts.Close() to shutdown the server when 
	// the test finishes.
	ts := httptest.NewTLSServer(app.routes())
	defer ts.Close()

	// The network address that the test server is listening on is contained 
	// in the ts.URL field. We can use this along with the ts.Client().Get() 
	// method to make a GET /ping request against the test server. This 
	// returns a http.Response struct containing the response.
	rs, err := ts.Client().Get(ts.URL + "/ping")
	if err != nil {
		t.Fatal()
	}

	if rs.StatusCode != http.StatusOK {
		t.Errorf("want %d; got %d", http.StatusOK, rs.StatusCode)
	}

	defer rs.Body.Close()
	body, err := ioutil.ReadAll(rs.Body)
	if err != nil {
		t.Fatal()
	}
	
	if string(body) != "OK" {
		t.Errorf("want body to equal %q", "OK")
	}
}
